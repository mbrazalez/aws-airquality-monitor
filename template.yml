AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
#########################################################################
Parameters:
  ## The endpoint that receives notifications ##
  SubscriptionEndPoint:
    Type: String
    Description: The endpoint that receives notifications.
    Default: 'manuel.brazalez@alu.uclm.es'

  ## The subscription protocol ##
  SubscriptionProtocol:
    Type: String
    Description: The subscription protocol
    AllowedValues:
    - http
    - https
    - email
    - email-json
    - sms
    - sqs
    - application
    - lambda
    Default: email

  ## The S3 bucket name ##
  S3BucketName:
    Type: String
    Description: The name of the S3 bucket
    Default: 'aqm-bucket-ssn-2024'  
#########################################################################
Resources:
  ## DynamoDB Table to store the air quality data ##
  AirQualityDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "station"
          AttributeType: "S"
        - AttributeName: "timestamp"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "station"
          KeyType: "HASH"
        - AttributeName: "timestamp"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: "NEW_IMAGE"

  ## Lambda function to scrape the air quality data ##
  SeleniumFunction:
    Type: AWS::Serverless::Function
    DependsOn: AirQualityDB
    Properties:
      Role: LabRole
      PackageType: Image
      Architectures:
        - x86_64
      Timeout: 120
      MemorySize: 2048
      Events:
        ScheduleEvent:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: "rate(1 hour)"
            RoleArn: LabRole

      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref AirQualityDB
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref AirQualityDB
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: .
      DockerTag: latest

  ## SNS topic to send notifications when there is a new entry in the air quality database ##
  AirQualityTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: AirQualityTopic

  ## SNS subscription to send notifications to the endpoint ##
  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Ref: SubscriptionEndPoint
      Protocol:
        Ref: SubscriptionProtocol
      TopicArn:
        Ref: AirQualityTopic
  
  ## S3 Bucket for saving the generated reports ##
  AirQualityReportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: false

  ## Bucket policy to allow public access ##      
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AirQualityReportsBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${AirQualityReportsBucket}/*'

  ## Lambda function to generate reports ##
  ReportsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./reports_lambda/
      Handler: main.lambda_handler
      Runtime: python3.12
      Role: LabRole
      Architectures:
        - x86_64
      Timeout: 120
      MemorySize: 2048
      Events:
        DDBEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt AirQualityDB.StreamArn
            StartingPosition: TRIM_HORIZON
      Environment:
        Variables:
          S3_BUCKET: !Ref AirQualityReportsBucket
          DYNAMODB_TABLE: !Ref AirQualityDB
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AirQualityDB
        - S3WritePolicy:
            BucketName: !Ref S3BucketName

  ## Lambda function to send notifications when there is a new report ready ##
  NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./notification_lambda/
      Handler: main.lambda_handler
      Runtime: python3.12
      Role: LabRole
      Architectures:
        - x86_64
      Timeout: 120
      MemorySize: 2048
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt AirQualityTopic.TopicName
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref AirQualityReportsBucket
            Events: ['s3:ObjectCreated:*']     
      Environment:
        Variables:
          SNS_TOPIC: !Ref AirQualityTopic
          S3_BUCKET: !Ref S3BucketName

  ## Lambda invoke permission to allow S3 to invoke the notification function ##
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt NotificationFunction.Arn
      Action: lambda:InvokeFunction
      Principal: 's3.amazonaws.com'
      SourceArn: !GetAtt AirQualityReportsBucket.Arn
